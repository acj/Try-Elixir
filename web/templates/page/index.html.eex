<!-- <span id="status" class="label label-success pull-left"></span> -->

  <div class="bs-callout bs-callout-info">
    <h2>Free for 5 minutes? Try some <a href="http://elixir-lang.org" target="_blank">Elixir</a> now!</h2>
  </div>

<div class="row main">
  <!-- <div class="col-lg-5 intro">
    <p>
      <a href="http://elixir-lang.org" target="_blank">Elixir</a> is a functional, meta-programming aware language built on top of the Erlang VM.
    </p>
    <p>
      Furthermore, Elixir is geared towards a 1.0.0 release on 30th August
      so there is no better time to get started!
    </p>
    <p>
      Try typing some elixir code into the terminal on the right.
    </p>

    <div class="sample">
      <h4 class="purple_header">Sample code</h4>
      <p>The code samples below are taken from <a href="http://elixir-lang.org/getting_started" target="_blank">Elixir Lang - Getting Started</a>
    </div>
  </div> -->
  <div class="col-lg-12">
    <div id="console"></div>
  </div>
</div>
<script src="/js/jquery.min.js" type="text/javascript" charset="utf-8"></script>
<script type="text/javascript" src="/static/js/phoenix.js"></script>
<script type="text/javascript" src="/static/js/jqconsole.js"></script>

<script>
      $(function() {
        var console_channel;

        var setup_console = function(version){
          var header = 'Interactive Elixir (' + version + ')\n';
          window.jqconsole = $('#console').jqconsole(header, 'iex> ');
          // Move to line start Ctrl+A.
          jqconsole.RegisterShortcut('A', function() {
            jqconsole.MoveToStart();
            handler();
          });
          // Move to line end Ctrl+E.
          jqconsole.RegisterShortcut('E', function() {
            jqconsole.MoveToEnd();
            handler();
          });
          // Clear prompt
          jqconsole.RegisterShortcut('R', function() {
            jqconsole.AbortPrompt();
            handler();
          });
        };


        var BLOCK_OPENERS, multiLineHandler,
        __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

        BLOCK_OPENERS = ["do"];
        var TOKENS;

        TOKENS = /\s+|\d+(?:\.\d*)?|"(?:[^"]|\\.)*"|'(?:[^']|\\.)*'|\/(?:[^\/]|\\.)*\/|[-+\/*]|[<>=]=?|:?[a-z@$][\w?!]*|[{}()\[\]]|[^\w\s]+/ig;


        var multiLineHandler = function(command) {
          var braces, brackets, last_line_changes, levels, line, parens, token, _i, _j, _len, _len1, _ref, _ref1;
          levels = 0;
          parens = 0;
          braces = 0;
          brackets = 0;
          last_line_changes = 0;
          _ref = command.split('\n');
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            line = _ref[_i];
            last_line_changes = 0;
            _ref1 = line.match(TOKENS) || [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              token = _ref1[_j];
              if (__indexOf.call(BLOCK_OPENERS, token) >= 0) {
                levels++;
                last_line_changes++;
              } else if (token === '(') {
                parens++;
                last_line_changes++;
              } else if (token === '{') {
                braces++;
                last_line_changes++;
              } else if (token === '[') {
                brackets++;
                last_line_changes++;
              } else if (token === 'end') {
                levels--;
                last_line_changes--;
              } else if (token === ')') {
                parens--;
                last_line_changes--;
              } else if (token === ']') {
                braces--;
                last_line_changes--;
              } else if (token === '}') {
                brackets--;
                last_line_changes--;
              }
              if (levels < 0 || parens < 0 || braces < 0 || brackets < 0) {
                return false;
              }
            }
          }
          if (levels > 0 || parens > 0 || braces > 0 || brackets > 0) {
            if (last_line_changes > 0) {
              return 1;
            } else if (last_line_changes < 0) {
              return -1;
            } else {
              return 0;
            }
          } else {
            return false;
          }
        };




        var handler = function(command) {
          if(command){
            console_channel.send("shell:stdin", {data: command});
          }
          // jqconsole.Prompt(true, handler, function(command){
          //   return false;
          // });

          return jqconsole.Prompt(true, handler, multiLineHandler);
        };

        var socket = new Phoenix.Socket("ws://" + location.host + "/ws");
        var $status = $('#status');

        socket.join("shell", "shell", {}, function(chan){
          chan.on("join", function(message){
            console.log(message)
            console_channel = chan;
            $status.text(message.status);
            setup_console(message.version);
            handler();
          });

          chan.on("stdout", function(message){
            var txt = JSON.parse(message);

            if(txt){
              // jqconsole.ClearPromptText(true);
              // jqconsole.SetPromptLabel(txt.prompt);
              jqconsole.Write(txt.result + '\n');
              jqconsole.Write(':' + txt.type + '\n');
            }
          });
        }); // end socket block
      });
    </script>

